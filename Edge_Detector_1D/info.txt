Fret:
    thresholds = [.25, .5, 1.0, 2.0]
    phi = 60
    delta = 30
 Num         Time	     Mean	   Stdv
1     [    1   188)     1.6665    0.1504
2     [  188   256)     1.0943    0.1191
3     [  256   752)     1.8659    0.1404
4     [  752   771)     1.0536    0.1360
5     [  771   841)     1.7602    0.1370
6     [  841   900]     1.0680    0.1508
1. 不用墒，直接用数据逐段读取
2.确定K值，先对前K个状态标为不同的状态，然后剩下来的状态用来去比对其中的状态。

Num         Time	     Mean	   Stdv
1     [    1  1223)     0.1773    0.0822
2     [ 1224  2369)     0.2082    0.1168
3     [ 2370  4637)     0.3251    0.1664
4     [ 4638  7030)     0.3610    0.1886
5     [ 7031  9733)     0.3296    0.1745
6     [ 9734 11157)     0.4483    0.1402
7     [11158 12187)     0.6359    0.1091
8     [12188 14888)     0.6257    0.2573
9     [14889 17347)     0.4587    0.1775
10     [17348 19417)     0.4138    0.1530
11     [19418 21947)     0.4561    0.1650
12     [21948 24279)     0.4554    0.1448
13     [24280 26792)     0.5206    0.1866
14     [26793 29042)     0.3199    0.1670
15     [29043 31638)     0.2766    0.2057
16     [31639 34219)     0.3030    0.1763
17     [34220 36862)     0.3359    0.1751
18     [36863 38968)     0.4056    0.1366
19     [38969 41488)     0.4980    0.1762
20     [41489 43787)     0.3770    0.1064
21     [43788 46264)     0.4459    0.2041
22     [46265 48829)     0.4053    0.1605
23     [48830 49971)     0.5332    0.1142
24     [49972 50000]     0.0000    0.0000



Data4_prey：1

Data 4 cluster:
元素： range, y(Xend)-y(X0), Max-Min

All event -> Queue
Queue.pop / first one

for (i<=k+1) Queue.pop, Event[i]=i

While(!Queue.empty()){
    if(e<=k):
        i<-argmin(zt,ci)

        if(zt,ci) <=2d
            ei = ei+zt
            ci = ci+a(zt-ci)
        else
            e= e + zt
    else:
        (i,j)<- argmin|ci,cj|


}



  for i  in range(0,minmaxIdx_smooth.__len__()):
        if(i==0):
            length = minmaxIdx_smooth[0]
            clu.Leng = length
            clu.Mean = stats[i][0]
            clu.Stdv = stats[i][1]
            clu.state = k
            cluster_queue.append(clu)
            k = k + 1

        else:
            print("cluster queue")
            for j, element in enumerate(cluster_queue):
                print(element.Mean)
            print('\n')
            Array_diff.clear()
            length = minmaxIdx_smooth[i]- minmaxIdx_smooth[i-1]+1
            print("current element:")
            print(stats[i][0])
            print('\n')
            for element in enumerate(cluster_queue):
                diff.diff_Leng = abs(length-element[1].Leng)
                diff.diff_Mean = abs(stats[i][0]-element[1].Mean)
                diff.diff_Stdv = abs(stats[i][1]-element[1].Stdv)
                Array_diff.append(diff)

            Array_diff = diff_sort.diff_sort(Array_diff)


            if(Array_diff[0].diff_Leng>130):
                clu.Leng = length
                clu.Mean = stats[i][0]
                clu.Stdv = stats[i][1]
                clu.state = k
                cluster_queue.append(clu)
                k = k + 1
                continue
            if (Array_diff[0].diff_Mean > 0.36):
                clu.Leng = length
                clu.Mean = stats[i][0]
                clu.Stdv = stats[i][1]
                clu.state = k
                cluster_queue.append(clu)
                k = k + 1
                continue
            if (Array_diff[0].diff_Stdv > 0.025):
                clu.Leng = length
                clu.Mean = stats[i][0]
                clu.Stdv = stats[i][1]
                clu.state = k
                cluster_queue.append(clu)
                k = k + 1
                continue
            else:
                print(1)



